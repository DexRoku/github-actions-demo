# This github actions workflow file demonstrates how to use a matrix strategy to run jobs on different operating systems and Python versions.
# It includes steps to check out the code, print the OS version, and run Python commands.
# It showcases how to use different strategies for running jobs in parallel across multiple environments.
# Fail-fast, max-parallel, and exclusion strategies are used to control the execution of jobs.

name: Matrix Workflow
# The idea is to demonstrate how to use a matrix strategy to run jobs on different operating systems and Python versions.

on:
    push:
        branches:
        - main

jobs: 
    deploy-on-ubuntu:
      runs-on: ubuntu-latest
      strategy:
        fail-fast: false
        max-parallel: 2
        matrix:
          os: [ubuntu-latest, ubuntu-22.04, ubuntu-20.04, windows-latest, windows-2022, windows-2019]
          python-version: [3.8, 3.9, 3.10, 3.11]
          exclude: 
            - os: windows-latest
              python-version: 3.8
            - os: windows-2022
              python-version: 3.8
            - os: windows-2019
              python-version: 3.8
      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Print the OS version(Ubuntu)
          if: startsWith(matrix.os, 'ubuntu')
          run: |
            echo "Running on ${{ matrix.os }}"
            lsb_release -a
        - name: Print the OS version(Windows)
          if: startsWith(matrix.os, 'windows')
          shell: pwsh
          run: |
            echo "Running on ${{ matrix.os }}"
            Get-ComputerInfo | Select-Object -Property WindowsVersion, WindowsBuildLabEx
    


        
